import { forwardRef, useCallback, useEffect, useImperativeHandle, useMemo, useState } from 'react'
import { apiRequest, buildApiUrl } from '../../utils/api'
import { fastFetch } from '../../utils/fastFetch'

export type AdminIntroDashboardHandle = {
  refresh: () => Promise<void>
}

type VisitorTrend = {
  date: string
  hits: number
  uniqueVisitors: number
}

type VisitorInsights = {
  rangeDays: number
  today: {
    uniqueVisitors: number
    hits: number
    distinctIps: number
  }
  range: {
    uniqueVisitors: number
    hits: number
    distinctIps: number
  }
  lifetime: {
    uniqueVisitors: number
    hits: number
    distinctIps: number
  }
  trend: VisitorTrend[]
  topPaths: Array<{ path: string; hits: number }>
  topAgents: Array<{ userAgent: string; hits: number }>
  recentSessions: Array<{
    visitDate: string
    ipAddress: string | null
    userAgent: string | null
    path: string | null
    hits: number
    lastSeen: string
  }>
}

type DiskSnapshot = {
  mount: string
  totalBytes: number
  freeBytes: number
  usedBytes: number
  percentUsed: number
  percentFree: number
}

type SystemStatus = {
  timestamp: string
  disk: DiskSnapshot | null
  memory: DiskSnapshot | null
  cpu: {
    one: number
    five: number
    fifteen: number
  }
  meta: {
    hostname: string
    platform: string
    release: string
    arch: string
    uptimeSeconds: number
  }
}

type AdminIntroDashboardProps = {
  rangeDays?: number
}

const numberFormatter = new Intl.NumberFormat('th-TH')

function formatDate(value: string) {
  if (!value) return '-'
  const date = new Date(value)
  if (Number.isNaN(date.getTime())) return value
  try {
    return date.toLocaleString('th-TH', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    })
  } catch {
    return value
  }
}

function formatDay(value: string) {
  if (!value) return '-'
  const date = new Date(value)
  if (Number.isNaN(date.getTime())) return value
  try {
    return date.toLocaleDateString('th-TH', {
      month: 'short',
      day: 'numeric',
    })
  } catch {
    return value
  }
}

function formatBytes(value?: number | null) {
  if (value === null || value === undefined || !Number.isFinite(value)) return '-'
  if (value === 0) return '0 B'
  const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB']
  let idx = 0
  let output = value
  while (output >= 1024 && idx < units.length - 1) {
    output /= 1024
    idx += 1
  }
  const decimals = output < 10 && idx > 0 ? 1 : 0
  return `${output.toFixed(decimals)} ${units[idx]}`
}

function formatPercent(value?: number | null) {
  if (value === null || value === undefined || !Number.isFinite(value)) return '-'
  return `${value.toFixed(0)}%`
}

function formatDuration(seconds?: number | null) {
  if (!Number.isFinite(seconds || 0) || !seconds) return '-'
  const s = Math.max(0, Math.floor(seconds))
  const days = Math.floor(s / 86_400)
  const hours = Math.floor((s % 86_400) / 3_600)
  const minutes = Math.floor((s % 3_600) / 60)
  const parts: string[] = []
  if (days) parts.push(`${days} ‡∏ß‡∏±‡∏ô`)
  if (hours) parts.push(`${hours} ‡∏ä‡∏°.`)
  if (minutes || parts.length === 0) parts.push(`${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`)
  return parts.slice(0, 2).join(' ')
}

const AdminIntroDashboard = forwardRef<AdminIntroDashboardHandle, AdminIntroDashboardProps>(
  ({ rangeDays = 30 }, ref) => {
    const [insights, setInsights] = useState<VisitorInsights | null>(null)
    const [loading, setLoading] = useState(true)
    const [error, setError] = useState<string | null>(null)
  const [system, setSystem] = useState<SystemStatus | null>(null)

    const load = useCallback(async () => {
      setLoading(true)
      setError(null)
      try {
        const [insightsOutcome, systemOutcome] = await Promise.allSettled([
          fastFetch<{ success: boolean; data?: VisitorInsights; error?: string }>(
            buildApiUrl(`/api/visitors/insights?range=${rangeDays}`),
            { ttlMs: 2000 }
          ),
          (async () => {
            try {
              const response = await apiRequest('/api/system/status')
              if (!response.ok) {
                throw new Error(`HTTP ${response.status}`)
              }
              const json = await response.json().catch(() => null)
              if (json?.success && json.data) {
                return json.data as SystemStatus
              }
              throw new Error(json?.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ')
            } catch (error) {
              console.warn('Failed to fetch system status', error)
              return null
            }
          })(),
        ])

        const insightsError = insightsOutcome.status === 'rejected'
          ? (insightsOutcome.reason instanceof Error ? insightsOutcome.reason.message : String(insightsOutcome.reason))
          : (!insightsOutcome.value?.success || !insightsOutcome.value.data)
            ? (insightsOutcome.value?.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ')
            : null

        if (insightsError) {
          throw new Error(insightsError)
        }

        if (insightsOutcome.status === 'fulfilled' && insightsOutcome.value?.data) {
          setInsights(insightsOutcome.value.data)
        }
        if (systemOutcome.status === 'fulfilled') {
          setSystem(systemOutcome.value)
        } else {
          setSystem(null)
        }
      } catch (err: any) {
        console.error('Failed to fetch visitor insights', err)
        setError(err?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
      } finally {
        setLoading(false)
      }
    }, [rangeDays])

    useImperativeHandle(ref, () => ({ refresh: load }), [load])

    useEffect(() => {
      load()
    }, [load])

    const trendMax = useMemo(() => {
      if (!insights?.trend?.length) return 1
      return Math.max(...insights.trend.map(item => item.hits || 0), 1)
    }, [insights])

    const renderLoading = () => (
      <div className="rounded-3xl border border-slate-200 bg-white p-8 shadow-sm">
        <div className="flex items-center justify-center gap-3 text-slate-500">
          <div className="h-4 w-4 animate-spin rounded-full border-2 border-emerald-500 border-t-transparent" />
          <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°...</span>
        </div>
      </div>
    )

    const renderError = () => (
      <div className="rounded-3xl border border-red-200 bg-red-50 p-8 text-red-600 shadow-sm">
        ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {error}
      </div>
    )

    if (loading) return renderLoading()
    if (error) return renderError()
    if (!insights) return null

    const { today, range, lifetime, topPaths, topAgents, recentSessions, trend } = insights
    const disk = system?.disk || null
    const memory = system?.memory || null
    const uptimeText = formatDuration(system?.meta.uptimeSeconds)
    const loadText = system ? `${system.cpu.one.toFixed(2)} ¬∑ ${system.cpu.five.toFixed(2)} ¬∑ ${system.cpu.fifteen.toFixed(2)}` : '-'
    const systemStamp = system?.timestamp ? formatDate(system.timestamp) : null

    const rangeLabelDays = insights.rangeDays ?? rangeDays

    const summaryCards = [
      {
        label: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
        value: numberFormatter.format(today.uniqueVisitors),
        detail: `IP ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ ${numberFormatter.format(today.distinctIps)}`,
        icon: 'üë•',
        border: 'border-emerald-100',
        background: 'bg-emerald-50/80',
        header: 'text-emerald-600',
        detailColor: 'text-emerald-600/70',
      },
      {
        label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
        value: numberFormatter.format(today.hits),
        detail: '‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô',
        icon: 'üìà',
        border: 'border-sky-100',
        background: 'bg-sky-50/80',
        header: 'text-sky-600',
        detailColor: 'text-sky-600/70',
      },
      {
        label: `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ ${rangeLabelDays} ‡∏ß‡∏±‡∏ô`,
        value: numberFormatter.format(range.uniqueVisitors),
        detail: `${numberFormatter.format(range.distinctIps)} IP ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤`,
        icon: 'üìÜ',
        border: 'border-violet-100',
        background: 'bg-violet-50/80',
        header: 'text-violet-600',
        detailColor: 'text-violet-600/70',
      },
      {
        label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
        value: numberFormatter.format(lifetime.hits),
        detail: `${numberFormatter.format(lifetime.uniqueVisitors)} ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`,
        icon: 'üèÅ',
        border: 'border-amber-100',
        background: 'bg-amber-50/80',
        header: 'text-amber-600',
        detailColor: 'text-amber-600/70',
      },
    ]

    return (
      <div className="space-y-6 lg:space-y-8">
        <section className="rounded-3xl border border-slate-200 bg-white p-8 text-slate-900 shadow-xl">
          <div className="grid gap-8 lg:grid-cols-[minmax(0,1.6fr)_minmax(0,1fr)]">
            <div className="flex flex-col gap-6">
              <div className="space-y-3">
                <div className="inline-flex items-center gap-3">
                  <span className="rounded-full bg-emerald-100 px-3 py-1 text-xs font-semibold uppercase tracking-[0.35em] text-emerald-600">Intro</span>
                  {systemStamp && (
                    <span className="text-xs text-slate-500">‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠ {systemStamp}</span>
                  )}
                </div>
                <h2 className="text-3xl font-semibold text-slate-900 lg:text-4xl">‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å</h2>
                <p className="max-w-2xl text-sm text-slate-500 lg:text-base">
                  ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á {rangeDays} ‡∏ß‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
                </p>
              </div>
              <div className="grid grid-cols-2 gap-3 sm:grid-cols-4">
                {summaryCards.map(card => (
                  <div
                    key={card.label}
                    className={`relative overflow-hidden rounded-2xl border ${card.border} ${card.background} p-4 shadow-sm transition duration-200 hover:shadow-md`}
                  >
                    <div className={`text-xs font-semibold uppercase tracking-wide ${card.header}`}>{card.label}</div>
                    <div className="mt-3 flex items-baseline gap-2 text-slate-900">
                      <span className="text-3xl font-bold">{card.value}</span>
                      <span className="text-lg">{card.icon}</span>
                    </div>
                    <div className={`mt-2 text-xs ${card.detailColor}`}>{card.detail}</div>
                  </div>
                ))}
              </div>
            </div>

            <div className="flex h-full flex-col justify-between rounded-2xl border border-slate-100 bg-slate-50 p-6 shadow-inner">
              <div>
                <h3 className="flex items-center gap-2 text-lg font-semibold text-slate-900">
                  <span className="text-emerald-500">üõ†Ô∏è</span>
                  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
                </h3>
                <p className="mt-1 text-xs text-slate-500">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å VPS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö</p>
              </div>
              {system ? (
                <div className="mt-4 space-y-4 text-sm text-slate-600">
                  <div>
                    <div className="text-xs uppercase tracking-wide text-emerald-600">‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á</div>
                    <div className="mt-1 text-base font-semibold text-slate-900">{system.meta.hostname}</div>
                    <div className="text-xs text-slate-500">{`${system.meta.platform} ${system.meta.release}`} ¬∑ {system.meta.arch.toUpperCase()}</div>
                  </div>
                  {disk && (
                    <div className="rounded-xl bg-white p-3 shadow-sm">
                      <div className="flex items-center justify-between text-xs uppercase tracking-wide text-emerald-600">
                        <span>‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö</span>
                        <span>{formatPercent(disk.percentFree)} ‡πÄ‡∏´‡∏•‡∏∑‡∏≠</span>
                      </div>
                      <div className="mt-2 text-sm text-slate-600">{formatBytes(disk.freeBytes)} ‡∏à‡∏≤‡∏Å {formatBytes(disk.totalBytes)}</div>
                      <div className="mt-3 h-2 w-full overflow-hidden rounded-full bg-slate-200">
                        <div
                          className="h-2 rounded-full bg-gradient-to-r from-emerald-400 to-emerald-600"
                          style={{ width: `${Math.min(100, Math.max(0, disk.percentUsed))}%` }}
                        />
                      </div>
                    </div>
                  )}
                  {memory && (
                    <div className="rounded-xl bg-white p-3 shadow-sm">
                      <div className="flex items-center justify-between text-xs uppercase tracking-wide text-sky-600">
                        <span>‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥</span>
                        <span>{formatPercent(memory.percentFree)} ‡πÄ‡∏´‡∏•‡∏∑‡∏≠</span>
                      </div>
                      <div className="mt-2 text-sm text-slate-600">{formatBytes(memory.freeBytes)} ‡∏à‡∏≤‡∏Å {formatBytes(memory.totalBytes)}</div>
                    </div>
                  )}
                  <div className="rounded-xl border border-slate-200 bg-white p-3">
                    <div className="flex flex-wrap items-center justify-between gap-2 text-xs uppercase tracking-wide text-slate-500">
                      <span>Uptime {uptimeText}</span>
                      <span>‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {loadText}</span>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="mt-4 rounded-xl border border-dashed border-slate-300 bg-white p-4 text-xs text-slate-500">
                  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
                </div>
              )}
            </div>
          </div>
        </section>

        <section className="grid gap-4 lg:grid-cols-4">
          <article className="rounded-2xl border border-emerald-100 bg-white p-5 shadow-sm">
            <p className="text-xs font-semibold uppercase tracking-wide text-emerald-600">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ {rangeDays} ‡∏ß‡∏±‡∏ô</p>
            <p className="mt-3 text-3xl font-semibold text-slate-900">{numberFormatter.format(range.uniqueVisitors)}</p>
            <p className="mt-1 text-xs text-slate-500">‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏à‡∏≤‡∏Å fingerprint ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô</p>
          </article>
          <article className="rounded-2xl border border-sky-100 bg-white p-5 shadow-sm">
            <p className="text-xs font-semibold uppercase tracking-wide text-sky-600">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏£‡∏ß‡∏° {rangeDays} ‡∏ß‡∏±‡∏ô</p>
            <p className="mt-3 text-3xl font-semibold text-slate-900">{numberFormatter.format(range.hits)}</p>
            <p className="mt-1 text-xs text-slate-500">‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</p>
          </article>
          <article className="rounded-2xl border border-violet-100 bg-white p-5 shadow-sm">
            <p className="text-xs font-semibold uppercase tracking-wide text-violet-600">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
            <p className="mt-3 text-3xl font-semibold text-slate-900">{numberFormatter.format(lifetime.uniqueVisitors)}</p>
            <p className="mt-1 text-xs text-slate-500">‡∏ô‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö</p>
          </article>
          <article className="rounded-2xl border border-amber-100 bg-white p-5 shadow-sm">
            <p className="text-xs font-semibold uppercase tracking-wide text-amber-600">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
            <p className="mt-3 text-3xl font-semibold text-slate-900">{numberFormatter.format(lifetime.hits)}</p>
            <p className="mt-1 text-xs text-slate-500">‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
          </article>
        </section>

        <section className="grid gap-4 lg:grid-cols-5">
          <div className="rounded-2xl border border-slate-200 bg-white p-6 shadow-sm lg:col-span-3">
            <h3 className="flex items-center gap-2 text-lg font-semibold text-slate-900">
              <span className="text-emerald-500">üìà</span>
              ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏° {rangeDays} ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            </h3>
            <div className="mt-4 space-y-3">
              {trend.length === 0 && (
                <div className="rounded-xl border border-dashed border-slate-200 p-6 text-center text-sm text-slate-500">
                  ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ
                </div>
              )}
              {trend.map(item => {
                const width = Math.round(((item.hits || 0) / trendMax) * 100)
                return (
                  <div key={item.date} className="flex items-center gap-3">
                    <div className="w-20 text-xs font-medium text-slate-500">{formatDay(item.date)}</div>
                    <div className="flex-1">
                      <div className="h-3 rounded-full bg-slate-100">
                        <div
                          className="h-3 rounded-full bg-gradient-to-r from-emerald-400 to-sky-500"
                          style={{ width: `${Math.max(width, 8)}%` }}
                        />
                      </div>
                    </div>
                    <div className="w-20 text-right text-xs text-slate-500">
                      {numberFormatter.format(item.hits)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                    </div>
                  </div>
                )
              })}
            </div>
          </div>

          <div className="rounded-2xl border border-slate-200 bg-white p-6 shadow-sm lg:col-span-2">
            <h3 className="flex items-center gap-2 text-lg font-semibold text-slate-900">
              <span className="text-amber-500">üî•</span>
              ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
            </h3>
            <div className="mt-4 space-y-3">
              {topPaths.length === 0 && (
                <div className="rounded-xl border border-dashed border-slate-200 p-6 text-center text-sm text-slate-500">
                  ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°
                </div>
              )}
              {topPaths.map(item => (
                <div key={item.path} className="flex items-center justify-between rounded-xl bg-emerald-50/60 p-3 text-sm text-emerald-900">
                  <span className="truncate">{item.path}</span>
                  <span className="font-semibold">{numberFormatter.format(item.hits)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</span>
                </div>
              ))}
            </div>
          </div>
        </section>

        <section className="grid gap-4 lg:grid-cols-5">
          <div className="rounded-2xl border border-slate-200 bg-white p-6 shadow-sm lg:col-span-3">
            <h3 className="flex items-center gap-2 text-lg font-semibold text-slate-900">
              <span className="text-sky-500">üß†</span>
              ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            </h3>
            <div className="mt-4 overflow-x-auto">
              <table className="min-w-full divide-y divide-slate-200 text-sm">
                <thead>
                  <tr className="text-left text-xs uppercase tracking-wider text-slate-500">
                    <th className="py-2 pr-4">‡πÄ‡∏ß‡∏•‡∏≤</th>
                    <th className="py-2 pr-4">IP</th>
                    <th className="py-2 pr-4">‡∏´‡∏ô‡πâ‡∏≤</th>
                    <th className="py-2 pr-4">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-slate-100 text-slate-700">
                  {recentSessions.map((session, idx) => (
                    <tr key={`${session.lastSeen}-${idx}`}>
                      <td className="py-2 pr-4 text-xs text-slate-500">{formatDate(session.lastSeen)}</td>
                      <td className="py-2 pr-4">
                        <div className="font-medium">{session.ipAddress || 'unknown'}</div>
                        <div className="text-xs text-slate-400 truncate">{session.userAgent || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</div>
                      </td>
                      <td className="py-2 pr-4 text-xs">{session.path || '/'}</td>
                      <td className="py-2 pr-4 text-right text-xs font-semibold">
                        {numberFormatter.format(session.hits)}
                      </td>
                    </tr>
                  ))}
                  {recentSessions.length === 0 && (
                    <tr>
                      <td colSpan={4} className="py-6 text-center text-sm text-slate-500">
                        ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>

          <div className="rounded-2xl border border-slate-200 bg-white p-6 shadow-sm lg:col-span-2">
            <h3 className="flex items-center gap-2 text-lg font-semibold text-slate-900">
              <span className="text-violet-500">üõ∞Ô∏è</span>
              ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
            </h3>
            <div className="mt-4 space-y-3">
              {topAgents.length === 0 && (
                <div className="rounded-xl border border-dashed border-slate-200 p-6 text-center text-sm text-slate-500">
                  ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
                </div>
              )}
              {topAgents.map(agent => (
                <div key={agent.userAgent} className="rounded-xl border border-slate-100 bg-slate-50 p-3">
                  <div className="text-sm font-medium text-slate-800 truncate">{agent.userAgent}</div>
                  <div className="text-xs text-slate-500">{numberFormatter.format(agent.hits)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</div>
                </div>
              ))}
            </div>
          </div>
        </section>
      </div>
    )
  }
)

AdminIntroDashboard.displayName = 'AdminIntroDashboard'

export default AdminIntroDashboard
